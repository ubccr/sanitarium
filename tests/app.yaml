#
# Miscellaneous Application Tests
#
#-------------------------------------------------------------------
# NWChem Test
#-------------------------------------------------------------------
nwchem:
  summary: basic NWChem test, C2H4
  build:
    source_path: nwchem-c2h4.tar.gz
#  scheduler: slurm
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    env:
      I_MPI_PMI_LIBRARY: /opt/software/slurm/lib64/libpmi.so
      I_MPI_DEBUG: 4
    modules: ['intel', 'nwchem']
    cmds:
      - '{{sched.test_cmd}} nwchem c2h4.inp'
  result_parse:
    regex:
      result:
        regex:  'Total SCF energy'
        action: store_true
#
# QE 
#
qe:
  summary: basic QE test, C4H8N2
  build:
    source_path: qe-test.tar.gz
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    env:
      OMP_NUM_THREADS: 1
    modules: ['foss', 'quantumespresso']
    cmds:
      - '{{sched.test_cmd}} pw.x -in test2.in'
  result_parse:
    regex:
      result:
        regex:  '!    total energy'
        action: store_true
#
# NAMD
#
namd:
  summary: basic NAMD test, JAC1000
  build:
    source_path: namd-jac1000.tar.gz
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    modules: ['foss', 'namd']
    cmds:
      - '{{sched.test_cmd}} namd2 jac1000.namd'
  result_parse:
    regex:
      result:
        regex:  'TIMING: 1000'
        action: store_true

#-------------------------------------------------------------------
# svFSI
#-------------------------------------------------------------------
svfsi:
  summary: basic svFSI test
  build:
    source_path: svFSI-test-06-channel-flow-2D.tar.gz
  schedule:
    nodes: 2
    slurm:
       mpi_cmd: srun
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
  run:
    modules: ['foss', 'svfsi']
    cmds:
      - '{{sched.test_cmd}} svFSI ./svFSI_Taylor-Hood.inp'
  result_parse:
    regex:
      result:
        regex:  'NS   100-1s'
        action: store_true

#-------------------------------------------------------------------
# LAMMPS rhodopsin quick test
#-------------------------------------------------------------------
lammps:
  summary: LAMMPS rhodopsin benchmark
  build:
    source_path: lammps-rhodo.tar.gz
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    modules: ['foss', 'lammps']
    cmds:
      - '{{sched.test_cmd}} lmp -in in.rhodo '
  result_parse:
    regex:
      result:
        regex:  'Performance:'
        action: store_true

#-------------------------------------------------------------------
# PETSC quick build and test
#-------------------------------------------------------------------
petsc:
  summary: PETSC ex50 tutorial build/test
  build:
    modules: ['foss','petsc']
    env:
      CC: mpicc
      CXX: mpicxx
    source_path: petsc-ex50.tar.gz
    cmds:
      - make ex50
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    modules: ['foss', 'petsc']
    cmds:
      - '{{sched.test_cmd}} ./ex50  -da_grid_x 120 -da_grid_y 120 -pc_type lu -pc_factor_mat_solver_package superlu_dist -ksp_monitor -ksp_view '
  result_parse:
    regex:
      norm:
        regex:  '  1 KSP Residual norm\s+(.+)'
      tol: 
        regex: '   tolerance for zero pivot\s+(.+)'
  result_evaluate:
     result: 'norm < tol'
     
#
# Dakota, simple UQ test
#  n.b. dakota detection of MPI env is broken for srun (but ok for mpirun), need to use DAKOTA_RUN_PARALLEL=1
#
dakota:
  summary: basic Dakota test, Heat Equation UQ LHS
  build:
    source_path: dakota-uq_heat_eq_mlcvmc.tgz
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    modules: ['foss', 'dakota']
    cmds:
      - '{{sched.test_cmd}} env DAKOTA_RUN_PARALLEL=1 dakota -i dakota_uq_heat_eq_mlcvmc.in -o dakota_uq_heat_eq_mlcvmc.out'
  result_parse:
    regex:
      result:
        regex:  'response_fn_1'
        files: dakota_uq_heat_eq_mlcvmc.out
        action: store_true

#-------------------------------------------------------------------
# mosdepth
#-------------------------------------------------------------------
mosdepth:
  summary: basic mosdepth test
  build:
    source_path: mosdepth-test.tar.gz
  schedule:
    nodes: 1
  run:
    modules: ['gcc', 'mosdepth']
    cmds:
      - '{{sched.test_cmd}} mosdepth t ./ovl.bam'
  result_parse:
    regex:
      result:
        regex:  'MT	16569	80	0.00	0	1'
        files: 't.mosdepth.summary.txt'
        action: store_true

#-------------------------------------------------------------------
# Perl Tests
#-------------------------------------------------------------------
perl:
  summary: Basic perl test
  schedule:
    nodes: 1
  build:
    source_path: hello.pl
  run:
    modules: ['gcc', 'perl']
    cmds:
      - '{{sched.test_cmd}} perl ./hello.pl'
  result_parse:
    regex:
      result:
        regex:  'hello ccr'
        action: 'store_true'

#-------------------------------------------------------------------
# VCFTools Test
#-------------------------------------------------------------------
vcftools:
  summary: Basic vcftools test
  schedule:
    nodes: 1
  build:
    source_path: input-data.vcf.gz
  run:
    modules: ['gcc', 'vcftools']
    cmds:
      - '{{sched.test_cmd}} vcftools --vcf ./input-data.vcf'
  result_parse:
    regex:
      result:
        regex:  'kept 1356 out of a possible 1356 Sites'
        action: 'store_true'

#-------------------------------------------------------------------
# SamTools Test
#-------------------------------------------------------------------
samtools:
  summary: Basic samtools test
  schedule:
    nodes: 1
  build:
    source_path: samtest.bam.gz
  run:
    modules: ['gcc', 'samtools']
    cmds:
      - '{{sched.test_cmd}} samtools view ./samtest.bam | wc -l'
  result_parse:
    regex:
      result:
        regex:  '3307'
        action: 'store_true'

#-------------------------------------------------------------------
# BedTools Test
#-------------------------------------------------------------------
bedtools:
  summary: Basic bedtools test
  schedule:
    nodes: 1
  build:
    source_path: bedtools.tar 
  run:
    modules: ['gcc', 'bedtools']
    cmds:
      - '{{sched.test_cmd}} bedtools intersect -a cpg.bed -b exons.bed -v |wc -l'
  result_parse:
    regex:
      result:
        regex:  '9846'
        action: 'store_true'

#-------------------------------------------------------------------
# GAMESS-US Test
#-------------------------------------------------------------------
gamess-us:
  summary: basic GAMESS-US test, C2H4
  build:
    source_path: gamess-c2h4.tar.gz
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=2','--constraint="IB&AVX512"']
  run:
    env:
      I_MPI_PMI_LIBRARY: /opt/software/slurm/lib64/libpmi.so
      I_MPI_DEBUG: 4
      TMPDIR: /tmp
    modules: ['intel', 'gamess-us']
    cmds:
      - 'rungms c2h4-acctc.inp 00 4'
      - 'rm -rf $HOME/restart'
  result_parse:
    regex:
      result:
        regex:  'FINAL RHF ENERGY IS'
        action: store_true

#-------------------------------------------------------------------
# Cobaya Test
#-------------------------------------------------------------------
cobaya:
  summary: Basic cobaya test
  schedule:
    nodes: 1
  build:
    source_path: gaussian-cobaya.yaml
  run:
    modules: ['foss', 'cobaya']
    cmds:
      - '{{sched.test_cmd}} cobaya-run -f gaussian-cobaya.yaml'
  result_parse:
    regex:
      result:
        regex:  'The run has converged'
        action: 'store_true'

#-------------------------------------------------------------------
# Mathematica Test
#-------------------------------------------------------------------
mathematica:
  summary: Basic mathematica test
  schedule:
    nodes: 1
  build:
    source_path: mathematica-test.m
  run:
    modules: ['mathematica']
    cmds:
      - '{{sched.test_cmd}} math -noprompt < mathematica-test.m'
  result_parse:
    regex:
      result:
        regex:  '2.718281828459045'
        action: 'store_true'

#-------------------------------------------------------------------
# CP2K Test
#-------------------------------------------------------------------
cp2k:
  summary: CP2K benchmark test
  build:
    source_path: H2O-64.inp
  schedule:
    nodes: 2
    slurm:
       sbatch_extra: ['--tasks-per-node=8','--constraint="IB&AVX512"']
       mpi_cmd: srun
  run:
    modules: ['foss', 'cp2k']
    cmds:
      - '{{sched.test_cmd}} cp2k.popt -i H2O-64.inp'
  result_parse:
    regex:
      result:
        regex:  'CP2K\s+1\s+1.0'
        action: store_true

#-------------------------------------------------------------------
# Trycycler Test
#-------------------------------------------------------------------
trycycler:
  summary: Trycycler test
  build:
    source_path: trycycler-v0.5.3.tar.gz
  schedule:
    nodes: 1
  run:
    modules: ['gcc', 'openmpi', 'trycycler']
    cmds:
      - '{{sched.test_cmd}} pytest'
  result_parse:
    regex:
      result:
        regex:  '\s180\s+[Pp]assed\s'
        action: store_true


#-------------------------------------------------------------------
# Unicycler Test
#-------------------------------------------------------------------
unicycler:
  summary: Unicycler test
  build:
    source_path: Unicycler.tar.gz
  schedule:
    nodes: 1
  run:
    modules: ['gcc', 'openmpi', 'unicycler']
    cmds:
      - '{{sched.test_cmd}} unicycler -1 short_reads_1.fastq.gz -2 short_reads_2.fastq.gz -l long_reads_low_depth.fastq.gz -o output_dir'
  result_parse:
    regex:
      result:
        regex:  '[Aa]ssembly\s+[Cc]omplete'
        action: store_true

#-------------------------------------------------------------------
# KronaTools Test
#-------------------------------------------------------------------
kronatools:
  summary: KronaTools test
  build:
    source_path: KronaTools-taxonomy.tar.gz
  schedule:
    nodes: 1
  run:
    modules: ['gcccore', 'kronatools']
    cmds:
      - '{{sched.test_cmd}} ktImportTaxonomy -tax ./taxonomy my.tab'
  result_parse:
    regex:
      result:
        regex:  '\[\s+ERROR\s+\]'
        action: store_false

#-------------------------------------------------------------------
# HyPhy Test
#-------------------------------------------------------------------
hyphy:
  summary: HyPhy tests
  build:
    source_path: HyPhy-tests.tar.bz2
  schedule:
    nodes: 1
    slurm:
  run:
    modules: ['gcc', 'openmpi', 'hyphy']
    cmds:
      - '{{sched.test_cmd}} ./HyPhy-tests/run_tests.sh'

hyphy-mpi:
  summary: HyPhy test using the MPI version of HyPhy
  build:
    source_path: HyPhy-tests.tar.bz2
  schedule:
    nodes: 2
    slurm:
      sbatch_extra: ['--tasks-per-node=1','--constraint="IB&AVX512"']
  run:
    modules: ['gcc', 'openmpi', 'hyphy']
    cmds:
      - '{{sched.test_cmd}} ./HyPhy-tests/run_tests.sh MPI'

#-------------------------------------------------------------------
# NanoPlot Test
#-------------------------------------------------------------------
nanoplot:
  summary: NanoPlot Test set
  build:
    cmds: []
  schedule:
    nodes: 1
  run:
    modules: ['gcc', 'openmpi', 'nanoplot']
    cmds:
      - '{{sched.test_cmd}} bash ${EBROOTNANOPLOT}/lib/python3.9/site-packages/scripts/test.sh'
  result_parse:
    regex:
      result:
        regex:  'Finished!'
        action: store_true

#-------------------------------------------------------------------
# ANSYS Test
#-------------------------------------------------------------------
ansys:
  summary: Simple ANSYS LS-DYNA test
  build:
    source_path: ball_and_plate.k
  schedule:
    nodes: 1
  run:
    modules: ['ansys']
    cmds:
      - '{{sched.test_cmd}} lsdyna i=ball_and_plate.k'
  result_parse:
    regex:
      result:
        regex:  'N o r m a l    t e r m i n a t i o n'
        action: store_true

#-------------------------------------------------------------------
# Amber Tests
#-------------------------------------------------------------------
amber:
  summary: Amber test
  build:
    source_path: amber_test.tar.gz
  schedule:
    nodes: 1
    slurm:
  run:
    modules: ['gcc', 'openmpi', 'amber']
    cmds:
      - '{{sched.test_cmd}} ./amber_test/run_tests.sh'
amber-cuda:
  summary: Amber test using the CUDA build of Amber on a GPU
  build:
    source_path: amber_test.tar.gz
  schedule:
    nodes: 1
    slurm:
       sbatch_extra: ['--gpus-per-node=1']
  run:
    modules: ['gcc', 'openmpi', 'amber/22.0-AmberTools-23.0-CUDA-11.8.0']
    cmds:
      - '{{sched.test_cmd}} ./amber_test/run_tests.sh cuda'

#-------------------------------------------------------------------
# MDAnalysis Test
#-------------------------------------------------------------------
mdanalysis:
  summary: Basic MDAnalysis Example
  build:
    source_path: MDAnalysisTests-2.7.0.tar.bz2
  schedule:
    nodes: 1
  run:
    modules: ['gcc', 'openmpi', 'mdanalysis']
    cmds:
      - '{{sched.test_cmd}} python3 basic_example.py'

